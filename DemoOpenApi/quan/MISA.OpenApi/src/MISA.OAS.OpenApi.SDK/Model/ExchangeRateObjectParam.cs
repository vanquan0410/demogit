/* 
 * Employees
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MISA.OAS.OpenApi.SDK.Client.OpenAPIDateConverter;

namespace MISA.OAS.OpenApi.SDK.Model
{
    /// <summary>
    /// ExchangeRateObjectParam
    /// </summary>
    [DataContract]
    public partial class ExchangeRateObjectParam :  IEquatable<ExchangeRateObjectParam>, IValidatableObject
    {
        /// <summary>
        /// (giới tính 0-nam 1-nữ)
        /// </summary>
        /// <value>(giới tính 0-nam 1-nữ)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }

        /// <summary>
        /// (giới tính 0-nam 1-nữ)
        /// </summary>
        /// <value>(giới tính 0-nam 1-nữ)</value>
        [DataMember(Name="Gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeRateObjectParam" /> class.
        /// </summary>
        /// <param name="employeeId">id của của nhân viên.</param>
        /// <param name="employeeCode">mã nhân viên.</param>
        /// <param name="employeeName">tên nhân viên.</param>
        /// <param name="gender">(giới tính 0-nam 1-nữ).</param>
        public ExchangeRateObjectParam(Guid employeeId = default(Guid), string employeeCode = default(string), string employeeName = default(string), GenderEnum? gender = default(GenderEnum?))
        {
            this.EmployeeId = employeeId;
            this.EmployeeCode = employeeCode;
            this.EmployeeName = employeeName;
            this.Gender = gender;
        }
        
        /// <summary>
        /// id của của nhân viên
        /// </summary>
        /// <value>id của của nhân viên</value>
        [DataMember(Name="EmployeeId", EmitDefaultValue=false)]
        public Guid EmployeeId { get; set; }

        /// <summary>
        /// mã nhân viên
        /// </summary>
        /// <value>mã nhân viên</value>
        [DataMember(Name="EmployeeCode", EmitDefaultValue=false)]
        public string EmployeeCode { get; set; }

        /// <summary>
        /// tên nhân viên
        /// </summary>
        /// <value>tên nhân viên</value>
        [DataMember(Name="EmployeeName", EmitDefaultValue=false)]
        public string EmployeeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExchangeRateObjectParam {\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  EmployeeCode: ").Append(EmployeeCode).Append("\n");
            sb.Append("  EmployeeName: ").Append(EmployeeName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangeRateObjectParam);
        }

        /// <summary>
        /// Returns true if ExchangeRateObjectParam instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangeRateObjectParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeRateObjectParam input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmployeeId == input.EmployeeId ||
                    (this.EmployeeId != null &&
                    this.EmployeeId.Equals(input.EmployeeId))
                ) && 
                (
                    this.EmployeeCode == input.EmployeeCode ||
                    (this.EmployeeCode != null &&
                    this.EmployeeCode.Equals(input.EmployeeCode))
                ) && 
                (
                    this.EmployeeName == input.EmployeeName ||
                    (this.EmployeeName != null &&
                    this.EmployeeName.Equals(input.EmployeeName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployeeId != null)
                    hashCode = hashCode * 59 + this.EmployeeId.GetHashCode();
                if (this.EmployeeCode != null)
                    hashCode = hashCode * 59 + this.EmployeeCode.GetHashCode();
                if (this.EmployeeName != null)
                    hashCode = hashCode * 59 + this.EmployeeName.GetHashCode();
                hashCode = hashCode * 59 + this.Gender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
