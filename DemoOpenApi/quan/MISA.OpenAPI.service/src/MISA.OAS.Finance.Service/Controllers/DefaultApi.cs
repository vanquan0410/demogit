/*
 * Employees
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using MISA.OAS.Finance.Service.Attributes;
using MISA.OAS.Finance.Service.Models;

namespace MISA.OAS.Finance.Service.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// xóa nhân viên
        /// </summary>
        /// <param name="userID">ID người dùng</param>
        /// <response code="200">Xóa nhân viên.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpDelete]
        [Route("/employees")]
        [ValidateModelState]
        [SwaggerOperation("EmployeesDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseResult), description: "Xóa nhân viên.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult EmployeesDelete([FromQuery][Required()]Guid userID)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"resultStream\" : \"resultStream\",\r\n  \"resultMessage\" : \"resultMessage\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseResult>(exampleJson)
            : default(ResponseResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// thêm nhân viên
        /// </summary>
        /// <param name="exchangeRateObjectParam"></param>
        /// <response code="201">thêm thành công.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/employees")]
        [ValidateModelState]
        [SwaggerOperation("EmployeesPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(ResponseResult), description: "thêm thành công.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult EmployeesPost([FromBody]ExchangeRateObjectParam exchangeRateObjectParam)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ResponseResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"resultStream\" : \"resultStream\",\r\n  \"resultMessage\" : \"resultMessage\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseResult>(exampleJson)
            : default(ResponseResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// sửa nhân viên
        /// </summary>
        /// <param name="employeeId">ID người dùng</param>
        /// <param name="exchangeRateObjectParam"></param>
        /// <response code="200">cập nhật thành công.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPut]
        [Route("/employees")]
        [ValidateModelState]
        [SwaggerOperation("EmployeesPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseResult), description: "cập nhật thành công.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult EmployeesPut([FromQuery][Required()]Guid employeeId, [FromBody]ExchangeRateObjectParam exchangeRateObjectParam)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"resultStream\" : \"resultStream\",\r\n  \"resultMessage\" : \"resultMessage\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseResult>(exampleJson)
            : default(ResponseResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// lấy danh sách nhân viên
        /// </summary>
        /// <response code="200">trả dữu liệu thành công</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/employees")]
        [ValidateModelState]
        [SwaggerOperation("GetEmployees")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Employee>), description: "trả dữu liệu thành công")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult GetEmployees()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Employee>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            List<Employee> employees = new List<Employee>();
            employees.Add(new Employee(new Guid(), "1234", "Nguyễn Văn A", 0));
            employees.Add(new Employee(new Guid(), "1235", "Nguyễn Văn B", 0));
            employees.Add(new Employee(new Guid(), "1236", "Nguyễn Văn C", 0));
            employees.Add(new Employee(new Guid(), "1237", "Nguyễn Văn D", 0));
            employees.Add(new Employee(new Guid(), "1238", "Nguyễn Văn E", 0));
            employees.Add(new Employee(new Guid(), "1239", "Nguyễn Văn F", 0));

            return Ok(employees);
        }
    }
}
