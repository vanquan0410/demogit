/*
 * CustomerApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using MISA.OAS.Finance.Service.Attributes;
using MISA.OAS.Finance.Service.Models;

namespace MISA.OAS.Finance.Service.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CustomerInfoApiController : ControllerBase
    { 
        /// <summary>
        /// xóa khách hàng
        /// </summary>
        /// <param name="customerId">ID người dùng</param>
        /// <response code="200">Xóa khách hàng.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpDelete]
        [Route("/customer")]
        [ValidateModelState]
        [SwaggerOperation("CustomerDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseResult), description: "Xóa khách hàng.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult CustomerDelete([FromQuery][Required()]Guid customerId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"DateOfBirth\" : \"2000-01-23\",\r\n  \"CompanyName\" : \"CompanyName\",\r\n  \"DebitMoney\" : 0.8008281904610115,\r\n  \"Email\" : \"Email\",\r\n  \"CustomerGroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"Address\" : \"Address\",\r\n  \"CustomerCode\" : \"CustomerCode\",\r\n  \"PhoneNumber\" : \"PhoneNumber\",\r\n  \"CustomerId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"CustomerName\" : \"CustomerName\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseResult>(exampleJson)
            : default(ResponseResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// thêm khách hàng
        /// </summary>
        /// <param name="responseResult"></param>
        /// <response code="201">thêm thành công.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/customer")]
        [ValidateModelState]
        [SwaggerOperation("CustomerPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(ResponseResult), description: "thêm thành công.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult CustomerPost([FromBody]ResponseResult responseResult)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ResponseResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"DateOfBirth\" : \"2000-01-23\",\r\n  \"CompanyName\" : \"CompanyName\",\r\n  \"DebitMoney\" : 0.8008281904610115,\r\n  \"Email\" : \"Email\",\r\n  \"CustomerGroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"Address\" : \"Address\",\r\n  \"CustomerCode\" : \"CustomerCode\",\r\n  \"PhoneNumber\" : \"PhoneNumber\",\r\n  \"CustomerId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"CustomerName\" : \"CustomerName\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseResult>(exampleJson)
            : default(ResponseResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// sửa thong tin khach hang
        /// </summary>
        /// <param name="employeeId">ID người dùng</param>
        /// <param name="responseResult"></param>
        /// <response code="200">cập nhật thành công.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPut]
        [Route("/customer")]
        [ValidateModelState]
        [SwaggerOperation("CustomerPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseResult), description: "cập nhật thành công.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult CustomerPut([FromQuery][Required()]Guid employeeId, [FromBody]ResponseResult responseResult)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"DateOfBirth\" : \"2000-01-23\",\r\n  \"CompanyName\" : \"CompanyName\",\r\n  \"DebitMoney\" : 0.8008281904610115,\r\n  \"Email\" : \"Email\",\r\n  \"CustomerGroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"Address\" : \"Address\",\r\n  \"CustomerCode\" : \"CustomerCode\",\r\n  \"PhoneNumber\" : \"PhoneNumber\",\r\n  \"CustomerId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"CustomerName\" : \"CustomerName\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseResult>(exampleJson)
            : default(ResponseResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// lấy số lượng bản ghi khách hàng
        /// </summary>
        /// <response code="200">trả dữu liệu thành công</response>
        [HttpGet]
        [Route("/countpage")]
        [ValidateModelState]
        [SwaggerOperation("GetCountpage")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponsePage), description: "trả dữu liệu thành công")]
        public virtual IActionResult GetCountpage()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponsePage));
            string exampleJson = null;
            exampleJson = "{\r\n  \"CountPage\" : 0.8008281904610115\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponsePage>(exampleJson)
            : default(ResponsePage);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// lấy thông tin khác hàng theo ID
        /// </summary>
        /// <param name="customerid"></param>
        /// <response code="200">trả dữu liệu thành công</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/customer/{customerid}")]
        [ValidateModelState]
        [SwaggerOperation("GetCustomerCustomerid")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseResult), description: "trả dữu liệu thành công")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult GetCustomerCustomerid([FromRoute][Required]string customerid)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"DateOfBirth\" : \"2000-01-23\",\r\n  \"CompanyName\" : \"CompanyName\",\r\n  \"DebitMoney\" : 0.8008281904610115,\r\n  \"Email\" : \"Email\",\r\n  \"CustomerGroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"Address\" : \"Address\",\r\n  \"CustomerCode\" : \"CustomerCode\",\r\n  \"PhoneNumber\" : \"PhoneNumber\",\r\n  \"CustomerId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"CustomerName\" : \"CustomerName\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseResult>(exampleJson)
            : default(ResponseResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// lấy danh sách khách hàng
        /// </summary>
        /// <remarks>lấy danh sách khách hàng</remarks>
        /// <response code="200">trả dữu liệu thành công</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/customer")]
        [ValidateModelState]
        [SwaggerOperation("GetCustomers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseResult), description: "trả dữu liệu thành công")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult GetCustomers()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"DateOfBirth\" : \"2000-01-23\",\r\n  \"CompanyName\" : \"CompanyName\",\r\n  \"DebitMoney\" : 0.8008281904610115,\r\n  \"Email\" : \"Email\",\r\n  \"CustomerGroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"Address\" : \"Address\",\r\n  \"CustomerCode\" : \"CustomerCode\",\r\n  \"PhoneNumber\" : \"PhoneNumber\",\r\n  \"CustomerId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"CustomerName\" : \"CustomerName\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseResult>(exampleJson)
            : default(ResponseResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
