/*
 * CustomerApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using MISA.OAS.Finance.Service.Converters;

namespace MISA.OAS.Finance.Service.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Customer : IEquatable<Customer>
    {
        /// <summary>
        /// id khách hàng
        /// </summary>
        /// <value>id khách hàng</value>
        [DataMember(Name="CustomerId", EmitDefaultValue=false)]
        public Guid CustomerId { get; set; }

        /// <summary>
        /// mã khách hàng
        /// </summary>
        /// <value>mã khách hàng</value>
        [DataMember(Name="CustomerCode", EmitDefaultValue=false)]
        public string CustomerCode { get; set; }

        /// <summary>
        /// tên khách hàng
        /// </summary>
        /// <value>tên khách hàng</value>
        [DataMember(Name="CustomerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// email khách hàng
        /// </summary>
        /// <value>email khách hàng</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// tên công ty
        /// </summary>
        /// <value>tên công ty</value>
        [DataMember(Name="CompanyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// id nhóm khách hàng
        /// </summary>
        /// <value>id nhóm khách hàng</value>
        [DataMember(Name="CustomerGroupId", EmitDefaultValue=false)]
        public Guid CustomerGroupId { get; set; }

        /// <summary>
        /// sô tiền nợ của khách hàng
        /// </summary>
        /// <value>sô tiền nợ của khách hàng</value>
        [DataMember(Name="DebitMoney", EmitDefaultValue=false)]
        public decimal DebitMoney { get; set; }

        /// <summary>
        /// dịa chỉ khách hàng
        /// </summary>
        /// <value>dịa chỉ khách hàng</value>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// số diện thoại khách hàng
        /// </summary>
        /// <value>số diện thoại khách hàng</value>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// ngày sinh khách hàng
        /// </summary>
        /// <value>ngày sinh khách hàng</value>
        [DataMember(Name="DateOfBirth", EmitDefaultValue=false)]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerCode: ").Append(CustomerCode).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CustomerGroupId: ").Append(CustomerGroupId).Append("\n");
            sb.Append("  DebitMoney: ").Append(DebitMoney).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Customer)obj);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="other">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerId == other.CustomerId ||
                    CustomerId != null &&
                    CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    CustomerCode == other.CustomerCode ||
                    CustomerCode != null &&
                    CustomerCode.Equals(other.CustomerCode)
                ) && 
                (
                    CustomerName == other.CustomerName ||
                    CustomerName != null &&
                    CustomerName.Equals(other.CustomerName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    CustomerGroupId == other.CustomerGroupId ||
                    CustomerGroupId != null &&
                    CustomerGroupId.Equals(other.CustomerGroupId)
                ) && 
                (
                    DebitMoney == other.DebitMoney ||
                    
                    DebitMoney.Equals(other.DebitMoney)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    DateOfBirth == other.DateOfBirth ||
                    DateOfBirth != null &&
                    DateOfBirth.Equals(other.DateOfBirth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomerId != null)
                    hashCode = hashCode * 59 + CustomerId.GetHashCode();
                    if (CustomerCode != null)
                    hashCode = hashCode * 59 + CustomerCode.GetHashCode();
                    if (CustomerName != null)
                    hashCode = hashCode * 59 + CustomerName.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (CompanyName != null)
                    hashCode = hashCode * 59 + CompanyName.GetHashCode();
                    if (CustomerGroupId != null)
                    hashCode = hashCode * 59 + CustomerGroupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + DebitMoney.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                    if (DateOfBirth != null)
                    hashCode = hashCode * 59 + DateOfBirth.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Customer left, Customer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Customer left, Customer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
