/*
 * Employees
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using MISA.OAS.Finance.Service.Converters;

namespace MISA.OAS.Finance.Service.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Employee : IEquatable<Employee>
    {
        public Employee(Guid employeeId, string employeeCode, string employeeName, GenderEnum gender)
        {
            EmployeeId = employeeId;
            EmployeeCode = employeeCode;
            EmployeeName = employeeName;
            Gender = gender;
        }


        /// <summary>
        /// id của của nhân viên
        /// </summary>
        /// <value>id của của nhân viên</value>
        [DataMember(Name="EmployeeId", EmitDefaultValue=false)]
        public Guid EmployeeId { get; set; }

        /// <summary>
        /// mã nhân viên
        /// </summary>
        /// <value>mã nhân viên</value>
        [DataMember(Name="EmployeeCode", EmitDefaultValue=false)]
        public string EmployeeCode { get; set; }

        /// <summary>
        /// tên nhân viên
        /// </summary>
        /// <value>tên nhân viên</value>
        [DataMember(Name="EmployeeName", EmitDefaultValue=false)]
        public string EmployeeName { get; set; }


        /// <summary>
        /// (giới tính 0-nam 1-nữ)
        /// </summary>
        /// <value>(giới tính 0-nam 1-nữ)</value>
        
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum _0Enum for 0
            /// </summary>
            
            _0Enum = 0,
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            
            _1Enum = 1
        }

        /// <summary>
        /// (giới tính 0-nam 1-nữ)
        /// </summary>
        /// <value>(giới tính 0-nam 1-nữ)</value>
        [DataMember(Name="Gender", EmitDefaultValue=false)]
        public GenderEnum Gender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  EmployeeCode: ").Append(EmployeeCode).Append("\n");
            sb.Append("  EmployeeName: ").Append(EmployeeName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Employee)obj);
        }

        /// <summary>
        /// Returns true if Employee instances are equal
        /// </summary>
        /// <param name="other">Instance of Employee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employee other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EmployeeId == other.EmployeeId ||
                    EmployeeId != null &&
                    EmployeeId.Equals(other.EmployeeId)
                ) && 
                (
                    EmployeeCode == other.EmployeeCode ||
                    EmployeeCode != null &&
                    EmployeeCode.Equals(other.EmployeeCode)
                ) && 
                (
                    EmployeeName == other.EmployeeName ||
                    EmployeeName != null &&
                    EmployeeName.Equals(other.EmployeeName)
                ) && 
                (
                    Gender == other.Gender ||
                    
                    Gender.Equals(other.Gender)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EmployeeId != null)
                    hashCode = hashCode * 59 + EmployeeId.GetHashCode();
                    if (EmployeeCode != null)
                    hashCode = hashCode * 59 + EmployeeCode.GetHashCode();
                    if (EmployeeName != null)
                    hashCode = hashCode * 59 + EmployeeName.GetHashCode();
                    
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                return hashCode;
            }
        }



        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Employee left, Employee right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Employee left, Employee right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
